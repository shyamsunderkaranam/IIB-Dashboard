angular.module("RDash", ["ui.bootstrap", "ui.router", "ngCookies", 'angularUtils.directives.dirPagination','angular-loading-bar','ngAnimate']);
"use strict"; angular.module("RDash").config(["$stateProvider", "$urlRouterProvider", function (t, e) { e.otherwise("/"), t.state("index", { url: "/", templateUrl: "templates/dashboard.html" }).state("tables", { url: "/tables", templateUrl: "templates/tables.html" }) }]);
function rdLoading() { var d = { restrict: "AE", template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>' }; return d } angular.module("RDash").directive("rdLoading", rdLoading);
function rdWidgetBody() { var d = { requires: "^rdWidget", scope: { loading: "@?", classes: "@?" }, transclude: !0, template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>', restrict: "E" }; return d } angular.module("RDash").directive("rdWidgetBody", rdWidgetBody);
function rdWidgetFooter() { var e = { requires: "^rdWidget", transclude: !0, template: '<div class="widget-footer" ng-transclude></div>', restrict: "E" }; return e } angular.module("RDash").directive("rdWidgetFooter", rdWidgetFooter);
function rdWidgetTitle() { var e = { requires: "^rdWidget", scope: { title: "@", icon: "@" }, transclude: !0, template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>', restrict: "E" }; return e } angular.module("RDash").directive("rdWidgetHeader", rdWidgetTitle);
function rdWidget() { var d = { transclude: !0, template: '<div class="widget" ng-transclude></div>', restrict: "EA" }; return d } angular.module("RDash").directive("rdWidget", rdWidget);
function AlertsCtrl(e) { e.alerts = [{ type: "success", msg: "Thanks for visiting! Feel free to create pull requests to improve the dashboard!" }, { type: "danger", msg: "Found a bug? Create an issue with as many details as you can." }], e.addAlert = function () { e.alerts.push({ msg: "Another alert!" }) }, e.closeAlert = function (t) { e.alerts.splice(t, 1) } } angular.module("RDash").controller("AlertsCtrl", ["$scope", AlertsCtrl]);
function MasterCtrl(t, e, r, h) {
	var o = 992; t.getWidth = function () { return window.innerWidth }, t.$watch(t.getWidth, function (g) { t.toggle = g >= o ? angular.isDefined(e.get("toggle")) ? e.get("toggle") ? !0 : !1 : !0 : !1 }), t.toggleSidebar = function () { t.toggle = !t.toggle, e.put("toggle", t.toggle) }, window.onresize = function () { t.$apply() }
	t.brokerOptions = false;
	t.valueReveal = false;
	r.selectedQMName = "";
	t.openLinks = false;
	t.channelsStopped = [];
	t.chnlStopped = false;
	t.queueManagersList = [];
	t.headerDispay='';
	t.queueManagerEnvs = [
		{
			"id": 0, "tier": "V", "expandable": false, "QMs": [
				{ "qmName": "VMQINST1" },
				{ "qmName": "VMQINST2" }]
		},
		{
			"id": 1, "tier": "F", "expandable": false, "QMs": [
				{ "qmName": "FMQINST1" },
				{ "qmName": "FMQINST2" }]
		}
	];
	//t.hostName = 'http://lnxs1252:';
	t.hostName='http://localhost:';
	t.portNumber = 9001;
	t.qApiURL = '';
	t.propertiesShown = false;
	t.queueDetails = '';
	t.channelStats = '';
	t.openChn = false;
	t.openQM = false;
	t.openTroub = false;
	t.problemQueues = [];
	t.problemPutQueues = [];
	r.problemChannels = '';
	r.pFlag = false;
	t.propertyValue = [];
	t.showQueueDropDwn = false;
	t.usefulLinks = [];
	r.selectedTierName = "";

	t.setAllToDefault = function () {
		t.openChn = false;
		t.openQM = false;
		t.openTroub = false;
		t.openLinks = false;
		t.valueReveal = false;
		r.pFlag = false;
		t.brokerOptions = false;
		t.propertiesShown = false;
		r.selectedTierName = "";
		t.openLinks = false;
		t.chnlStopped = false;
		t.problemQueues = [];
		t.problemPutQueues = [];
		t.channelsStopped = [];

	};

	t.openTier = function (id) {
		t.setAllToDefault();
		for (var i = 0; i < t.queueManagerEnvs.length; i++) {
			t.queueManagerEnvs[i].expandable = false;
			if (i == id) {
				t.queueManagerEnvs[id].expandable = true;
			}
		}
	};

	t.sort = function (keyname) {
		t.sortKey = keyname;   //set the sortKey to the param passed
		t.reverse = !t.reverse; //if true make it false and vice versa
	};

	t.openUsefulLinks = function () {
		t.openLinks = true;
		t.valueReveal = false;
		t.openQM = false;
		t.openChn = false;
		t.openTroub = false;
		r.pFlag = false;
		t.brokerOptions = false;
		t.propertiesShown = false;
		t.queueDetails = '';
		t.propertyValue = '';
		t.headerDispay='';
		for (var i = 0; i < t.queueManagerEnvs.length; i++) {
			t.queueManagerEnvs[i].expandable = false;
		};
		t.usefulLinks = [
			{ "linkName": "How To's / Trouble Shooting", 
			"actualLink": "https://wiki.kfplc.com/display/IPSS/IIB+Pre-prod+Support+Space+Home" }
		];
	};

	t.openMainRow = function (qName) {
		t.brokerOptions = true;
		t.valueReveal = false;
		t.selectedRow = null;
		t.openChn = false;
		t.openQM = false;
		t.openTroub = false;
		t.openLinks = false;
		r.selectedQMName = qName;
		t.headerDispay = 'Queue Manager: '+r.selectedQMName;
		console.log("You clicked on QM " + r.selectedQMName);
	};

	t.openQueue = function () {
		t.valueReveal = true;
		t.openQM = true;
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = false;
		r.pFlag = false;
		t.openLinks = false;
		console.log('Queue displayed');
	};

	t.openTroubleShoot = function () {
		t.getInhibitflag = true;
		t.putInhibitflag = true;
		t.chnlStopped = true;
		t.openQM = false;
		t.propertyValue = null;
		t.queueDetails = null;
		t.valueReveal = true;
		t.propertiesShown = false;
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = true;
		t.openLinks = false;
		t.qApiURL = '/listOfGetInhibitedQueues';
		/*t.problemQueues = ["SALESORDER.ATG.INBOUND.WMB","SEQUENTIAL.ECCGENERIC.WMB.OUTBOUND.WMB","ZCRMXIF_PARTNER_SAVE01.CRM.INBOUND.LOCAL"] ;
		t.problemPutQueues = ["SALESORDER.ATG.INBOUND.WMB","SEQUENTIAL.ECCGENERIC.WMB.OUTBOUND.WMB","ZCRMXIF_PARTNER_SAVE01.CRM.INBOUND.LOCAL"] ;*/
		t.channelsStopped = ["DYNATRACE.SVRCONN", "TO.FMQINST1", "MQPREPRDSUP.SVRCONN"];
		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL)
			.then(function (response) {
				t.problemQueues = response.data;
				console.log(t.problemQueues);
				if (t.problemQueues[0] == "No Queues are inhibited") {
					t.getInhibitflag = false;
				}
			});

		t.qApiURL = '/listOfPutInhibitedQueues';

		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL)
			.then(function (response) {
				t.problemPutQueues = response.data;
				console.log(t.problemPutQueues);
				if (t.problemPutQueues[0] == "No Queues are inhibited") {
					t.putInhibitflag = false;
				}
			});

		t.qApiURL = '/listOfChannelsStopped';
		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL)
			.then(function (response) {
				t.channelsStopped = response.data;
				console.log(t.channelsStopped);
				if (t.channelsStopped[0] == "All channels are working fine") {
					t.chnlStopped = false;
				}
			});

	};

	t.allowQueueGet = function (qname) {

		t.requestGetInhibition = [{ "qname": '' }];
		t.requestGetInhibition.qname = qname;
		console.log(t.requestGetInhibition);
		t.qApiURL = '/updatequeuestatusGet/';

		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL + qname)
			.then(function (response) {
				t.problemQueues = response.data;
				console.log(response.data);
				t.openTroubleShoot();
			});

		/*h({
			method : "PUT",
			url : t.hostName+t.portNumber+"/"+r.selectedQMName+t.qApiURL,
			data : qname,
			headers : {
				'Content-Type' : 'application/json'
			}
		}).then( _success, _error );*/

	};

	t.allowQueuePut = function (qname) {

		t.requestPutInhibition = [{ "qname": '' }];
		t.requestPutInhibition.qname = qname;
		console.log(t.requestPutInhibition);
		t.qApiURL = '/updatequeuestatusPut/';

		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL + qname)
			.then(function (response) {
				t.status = response.data;
				console.log(response.data);
				t.openTroubleShoot();
			});
		/*h({
			method : "PUT",
			url : t.hostName+t.portNumber+"/"+r.selectedQMName+t.qApiURL,
			data : qname,
			headers : {
				'Content-Type' : 'application/json'
			}
		}).then( _success, _error );*/

	};

	t.restartChannel = function (chnl) {
		t.qApiURL = '/updatechannelStatus/';

		h.get(t.hostName + t.portNumber + "/" + r.selectedQMName + t.qApiURL + chnl)
			.then(function (response) {
				t.status = response.data;
				console.log(response.data);
				t.openTroubleShoot();
			});
	};



	t.openChannel = function () {
		t.openChn = true;
		t.openQM = false;
		t.showQueueDropDwn = false;
		t.openLinks = false;
		t.chnlApiURL = "/channelStatus";
		t.url = t.hostName + t.portNumber + "/" + r.selectedQMName + t.chnlApiURL;
		console.log(t.url);
		//t.channelStats = {"DYNATRACE.SVRCONN":"RUNNING/INACTIVE","TO.FMQINST1":"RUNNING/INACTIVE","MQPREPRDSUP.SVRCONN":"RUNNING/INACTIVE"};

		h.get(t.url)
			.then(function (response) {
				t.channelStats = response.data;

			});
		t.propertyValue = null;
		t.queueDetails = null;
		t.valueReveal = true;
		t.propertiesShown = false;
		t.openTroub = false;
		console.log(t.channelStats);
	};
	
	t.getAllQueues = function () {
		t.propertiesShown = true;
		t.valueReveal = true;
		t.openQM = true;
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = false;
		r.pFlag = false;
		t.openLinks = false;
		//t.queueDetails=t.propertyValue[id];
		t.qApiURL = "/listOfAllQueues/";


		h.get(t.hostName+t.portNumber+"/"+r.selectedQMName+t.qApiURL)
		.then(function(response) {
		t.propertyValue = response.data;});

		/*h.get("templates/QueueJSON.json").then(function(response){ 
		t.propertyValue = response.data; 
		console.log(response.data);			
		});*/
		
	}

	t.queueDesc = function () {
		t.propertiesShown = true;
		t.valueReveal = true;
		t.openQM = true;
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = false;
		r.pFlag = false;
		t.openLinks = false;
		//t.queueDetails=t.propertyValue[id];
		t.qApiURL = "/getStatistics/";


		/*h.get(t.hostName+t.portNumber+"/"+r.selectedQMName+t.qApiURL+quName)
		.then(function(response) {
		t.queueDetails = response.data;});*/

		/*h.get("templates/QueueJSON.json").then(function(response){ 
		t.propertyValue = response.data; 
		console.log(response.data);			
		});*/

	};


}

angular.module("RDash").controller("MasterCtrl", ["$scope", "$cookieStore", "$rootScope", "$http", MasterCtrl
]);
